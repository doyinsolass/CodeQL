{
  "owasp_top20_rules": [
    {
      "id": "R001",
      "name": "SQL Injection",
      "cwe": "CWE-89",
      "description": "Untrusted input used to construct SQL queries can lead to data theft or corruption.",
      "fix": "Use parameterized queries or prepared statements.",
      "sample_code": "SELECT * FROM users WHERE id = '$userInput'"
    },
    {
      "id": "R002",
      "name": "Cross Site Scripting (XSS)",
      "cwe": "CWE-79",
      "description": "Improper handling of untrusted input allows injection of malicious scripts.",
      "fix": "Use output encoding and validate all input.",
      "sample_code": "<input value='${userInput}'>"
    },
    {
      "id": "R003",
      "name": "Information Leakage",
      "cwe": "CWE-209",
      "description": "Error messages reveal sensitive system or debug information.",
      "fix": "Sanitize and handle all exceptions securely.",
      "sample_code": "print(e)"
    },
    {
      "id": "R004",
      "name": "Frame Injection",
      "cwe": "CWE-451",
      "description": "Attackers inject frames to trick users and capture data.",
      "fix": "Use frame-busting code and validate URLs.",
      "sample_code": "<iframe src='malicious.com'></iframe>"
    },
    {
      "id": "R005",
      "name": "Unvalidated URL Redirection",
      "cwe": "CWE-601",
      "description": "Improper validation of redirect URLs allows phishing redirects.",
      "fix": "Implement a whitelist of allowed domains.",
      "sample_code": "response.redirect(request.GET['next'])"
    },
    {
      "id": "R006",
      "name": "Missing Session Timeout",
      "cwe": "CWE-613",
      "description": "Lack of session timeout enables unauthorized access after inactivity.",
      "fix": "Set appropriate session timeout limits.",
      "sample_code": "<session-timeout>0</session-timeout>"
    },
    {
      "id": "R007",
      "name": "Sensitive Info in GET URL",
      "cwe": "CWE-598",
      "description": "Sensitive data exposed in URL query parameters.",
      "fix": "Use POST instead of GET for sensitive information.",
      "sample_code": "GET /login?password=1234"
    },
    {
      "id": "R008",
      "name": "Session ID Cookies Not Secure",
      "cwe": "CWE-614",
      "description": "Session cookies transmitted over HTTP can be intercepted.",
      "fix": "Set secure flag on session cookies.",
      "sample_code": "Set-Cookie: JSESSIONID=123"
    },
    {
      "id": "R009",
      "name": "Cross Frame Scripting (XFS)",
      "cwe": "CWE-611",
      "description": "Attackers exploit frames to inject malicious scripts.",
      "fix": "Use proper validation and frame-busting techniques.",
      "sample_code": "<iframe src='attack.html'></iframe>"
    },
    {
      "id": "R010",
      "name": "Sensitive Info Displayed as Clear Text",
      "cwe": "CWE-312",
      "description": "Sensitive data like passwords or tokens are displayed as plain text.",
      "fix": "Mask sensitive fields using password input types.",
      "sample_code": "<input type='text' value='password123'>"
    },
    {
      "id": "R011",
      "name": "Sensitive Info Cached",
      "cwe": "CWE-525",
      "description": "Browser caching exposes confidential data.",
      "fix": "Use no-cache HTTP headers.",
      "sample_code": "<meta http-equiv='Cache-Control' content='public'>"
    },
    {
      "id": "R012",
      "name": "Inadequate Encryption Strength",
      "cwe": "CWE-326",
      "description": "Weak or outdated encryption algorithms can be brute-forced.",
      "fix": "Use strong encryption algorithms (AES-256, RSA-2048+).",
      "sample_code": "cipher = DES.new(key)"
    },
    {
      "id": "R013",
      "name": "CRLF Injection",
      "cwe": "CWE-93",
      "description": "User input in headers or logs can inject newlines.",
      "fix": "URL-encode user input and validate newlines.",
      "sample_code": "header = 'Location: ' + user_input"
    },
    {
      "id": "R014",
      "name": "Trust Boundary Violation",
      "cwe": "CWE-501",
      "description": "Untrusted input is mixed with trusted system data.",
      "fix": "Always validate input before trusting or storing.",
      "sample_code": "config['admin'] = request.GET['admin']"
    },
    {
      "id": "R015",
      "name": "Directory Traversal",
      "cwe": "CWE-22",
      "description": "User input allows access to arbitrary files on server.",
      "fix": "Restrict file access to safe directories only.",
      "sample_code": "open('../../etc/passwd')"
    },
    {
      "id": "R016",
      "name": "Session Fixation",
      "cwe": "CWE-384",
      "description": "Old session IDs are reused after login, enabling hijacking.",
      "fix": "Invalidate old sessions and issue new ones after login.",
      "sample_code": "session['user']=user"
    },
    {
      "id": "R017",
      "name": "Risky Cryptographic Algorithm",
      "cwe": "CWE-327",
      "description": "Deprecated algorithms like MD5 or SHA1 reduce data integrity.",
      "fix": "Use SHA-256 or better for hashing.",
      "sample_code": "hashlib.md5(password.encode())"
    },
    {
      "id": "R018",
      "name": "Credentials Management",
      "cwe": "CWE-256",
      "description": "Passwords or secrets stored in plain text.",
      "fix": "Use secure password hashing (bcrypt, Argon2).",
      "sample_code": "password='admin123'"
    },
    {
      "id": "R019",
      "name": "SQL Injection (Hibernate)",
      "cwe": "CWE-89",
      "description": "Dynamic SQL queries in ORM frameworks can be exploited.",
      "fix": "Use parameterized queries in ORM APIs.",
      "sample_code": "session.createQuery('from User where id='+id)"
    },
    {
      "id": "R020",
      "name": "Improper Resource Shutdown",
      "cwe": "CWE-404",
      "description": "Resources not released properly, leading to memory leaks or DoS.",
      "fix": "Always close files, connections, and streams.",
      "sample_code": "conn.open()"
    }
  ]
}
