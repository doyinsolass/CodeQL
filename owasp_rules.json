{
  "owasp_top20_rules": [
    {
      "id": "R001",
      "name": "SQL Injection",
      "cwe": "CWE-89",
      "description": "Untrusted input used in SQL queries can lead to data theft or corruption.",
      "fix": "Use parameterized queries or prepared statements.",
      "patterns": [
        "SELECT .* FROM .* WHERE .*['\"].*['\"]",
        "execute\\(.*\\+.*\\)",
        "Statement\\.execute\\(.*\\)",
        "connection\\.prepareStatement\\(.*\\)",
        "session\\.createQuery\\('from .* where .*='\\+.*\\)",
        "entityManager\\.createQuery\\(.*\\+.*\\)"
      ]
    },
    {
      "id": "R002",
      "name": "Cross Site Scripting (XSS)",
      "cwe": "CWE-79",
      "description": "Improper handling of untrusted input allows injection of malicious scripts.",
      "fix": "Use output encoding and validate all input.",
      "patterns": [
        "<script>.*</script>",
        "innerHTML = .*",
        "document\\.write\\(.*\\)",
        "element\\.insertAdjacentHTML\\(.*\\)",
        "React\\.dangerouslySetInnerHTML = .*"
      ]
    },
    {
      "id": "R003",
      "name": "Information Leakage",
      "cwe": "CWE-209",
      "description": "Error messages reveal sensitive system or debug information.",
      "fix": "Sanitize and handle all exceptions securely.",
      "patterns": [
        "print\\(.*Exception.*\\)",
        "console\\.error\\(.*\\)",
        "System\\.out\\.println\\(.*Exception.*\\)",
        "logger\\.error\\(.*\\)"
      ]
    },
    {
      "id": "R004",
      "name": "Frame Injection",
      "cwe": "CWE-451",
      "description": "Attackers inject frames to trick users and capture data.",
      "fix": "Use frame-busting code and validate URLs.",
      "patterns": [
        "<iframe src=.*>",
        "document\\.createElement\\('iframe'\\)",
        "window\\.open\\(.*\\)"
      ]
    },
    {
      "id": "R005",
      "name": "Unvalidated URL Redirection",
      "cwe": "CWE-601",
      "description": "Improper validation of redirect URLs allows phishing redirects.",
      "fix": "Implement a whitelist of allowed domains.",
      "patterns": [
        "response\\.sendRedirect\\(.*\\)",
        "window\\.location\\.href = .*",
        "res\\.redirect\\(.*\\)"
      ]
    },
    {
      "id": "R006",
      "name": "Missing Session Timeout",
      "cwe": "CWE-613",
      "description": "Lack of session timeout enables unauthorized access after inactivity.",
      "fix": "Set appropriate session timeout limits.",
      "patterns": [
        "<session-timeout>0</session-timeout>",
        "session\\.setMaxInactiveInterval\\(0\\)",
        "cookie\\.setMaxAge\\(0\\)"
      ]
    },
    {
      "id": "R007",
      "name": "Sensitive Info in GET URL",
      "cwe": "CWE-598",
      "description": "Sensitive data exposed in URL query parameters.",
      "fix": "Use POST instead of GET for sensitive information.",
      "patterns": [
        "GET .*\\?password=.*",
        "location\\.search=.*password=.*",
        "request\\.getParameter\\('password'\\)"
      ]
    },
    {
      "id": "R008",
      "name": "Session ID Cookies Not Secure",
      "cwe": "CWE-614",
      "description": "Session cookies transmitted over HTTP can be intercepted.",
      "fix": "Set secure flag on session cookies.",
      "patterns": [
        "Set-Cookie: .*; HttpOnly",
        "document\\.cookie = .*",
        "session\\.setAttribute\\('JSESSIONID',.*\\)"
      ]
    },
    {
      "id": "R009",
      "name": "Cross Frame Scripting (XFS)",
      "cwe": "CWE-611",
      "description": "Attackers exploit frames to inject malicious scripts.",
      "fix": "Use proper validation and frame-busting techniques.",
      "patterns": [
        "<iframe src=.*>",
        "window\\.frameElement",
        "frameElement\\.src = .*"
      ]
    },
    {
      "id": "R010",
      "name": "Sensitive Info Displayed as Clear Text",
      "cwe": "CWE-312",
      "description": "Sensitive data like passwords or tokens are displayed as plain text.",
      "fix": "Mask sensitive fields using password input types.",
      "patterns": [
        "<input type=['\"]text['\"] value=['\"].*password.*['\"]>",
        "console\\.log\\('password.*'\\)",
        "document\\.getElementById\\('password'\\)\\.value"
      ]
    },
    {
      "id": "R011",
      "name": "Sensitive Info Cached",
      "cwe": "CWE-525",
      "description": "Browser caching exposes confidential data.",
      "fix": "Use no-cache HTTP headers.",
      "patterns": [
        "<meta http-equiv=['\"]Cache-Control['\"] content=['\"]public['\"]>",
        "response\\.setHeader\\('Cache-Control', 'public'\\)",
        "pragma: public"
      ]
    },
    {
      "id": "R012",
      "name": "Inadequate Encryption Strength",
      "cwe": "CWE-326",
      "description": "Weak or outdated encryption algorithms can be brute-forced.",
      "fix": "Use strong encryption algorithms (AES-256, RSA-2048+).",
      "patterns": [
        "DES\\.new\\(",
        "MD5\\.hash\\(",
        "Crypto\\.createCipher\\('des'",
        "SHA1\\.create\\("
      ]
    },
    {
      "id": "R013",
      "name": "CRLF Injection",
      "cwe": "CWE-93",
      "description": "User input in headers or logs can inject newlines.",
      "fix": "URL-encode user input and validate newlines.",
      "patterns": [
        "header = 'Location: ' \\+ .*",
        "logger\\.info\\(.*\\n.*\\)"
      ]
    },
    {
      "id": "R014",
      "name": "Trust Boundary Violation",
      "cwe": "CWE-501",
      "description": "Untrusted input is mixed with trusted system data.",
      "fix": "Always validate input before trusting or storing.",
      "patterns": [
        "config\\[.*\\] = request\\.GET\\[.*\\]",
        "System\\.setProperty\\(.*userInput.*\\)"
      ]
    },
    {
      "id": "R015",
      "name": "Directory Traversal",
      "cwe": "CWE-22",
      "description": "User input allows access to arbitrary files on server.",
      "fix": "Restrict file access to safe directories only.",
      "patterns": [
        "open\\('\\.\\./\\.\\./.*'\\)",
        "FileInputStream\\(new File\\(.*\\.\\.\\/\\.\\.\\/.*\\)\\)"
      ]
    },
    {
      "id": "R016",
      "name": "Session Fixation",
      "cwe": "CWE-384",
      "description": "Old session IDs are reused after login, enabling hijacking.",
      "fix": "Invalidate old sessions and issue new ones after login.",
      "patterns": [
        "session\\['user'\\] = .*",
        "request\\.getSession\\(false\\)"
      ]
    },
    {
      "id": "R017",
      "name": "Risky Cryptographic Algorithm",
      "cwe": "CWE-327",
      "description": "Deprecated algorithms like MD5 or SHA1 reduce data integrity.",
      "fix": "Use SHA-256 or better for hashing.",
      "patterns": [
        "hashlib\\.md5\\(",
        "MessageDigest\\.getInstance\\('SHA-1'\\)"
      ]
    },
    {
      "id": "R018",
      "name": "Credentials Management",
      "cwe": "CWE-256",
      "description": "Passwords or secrets stored in plain text.",
      "fix": "Use secure password hashing (bcrypt, Argon2).",
      "patterns": [
        "password\\s*=\\s*['\"].*['\"]",
        "apiKey\\s*=\\s*['\"].*['\"]"
      ]
    },
    {
      "id": "R019",
      "name": "SQL Injection (Hibernate)",
      "cwe": "CWE-89",
      "description": "Dynamic SQL queries in ORM frameworks can be exploited.",
      "fix": "Use parameterized queries in ORM APIs.",
      "patterns": [
        "session\\.createQuery\\('from .* where .*='\\+.*\\)",
        "entityManager\\.createQuery\\(.*\\+.*\\)"
      ]
    },
    {
      "id": "R020",
      "name": "Improper Resource Shutdown",
      "cwe": "CWE-404",
      "description": "Resources not released properly, leading to memory leaks or DoS.",
      "fix": "Always close files, connections, and streams.",
      "patterns": [
        "conn\\.open\\(",
        "FileInputStream\\(.*\\)\\.close\\(",
        "Socket\\(.*\\)",
        "BufferedReader\\(.*\\)\\.close\\(",
        "DatabaseConnection\\.disconnect\\("
      ]
    }
  ]
}
